version: '2'
services:
  db:
    image: geosolutionsit/postgis-docker:9.6
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: db
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    environment:
      GEONODE_DATABASE: geonode
      GEONODE_DATABASE_PASSWORD: geonode
      GEONODE_GEODATABASE: geonode_data
      GEONODE_GEODATABASE_PASSWORD: geonode_data

  smtp:
    image: catatnight/postfix
    environment:
      # You could change this to something more suitable
      maildomain: ${SITEURL}
      smtp_user: noreply:docker

  rabbitmq:
    image: rabbitmq:3.6
    restart: unless-stopped

  django:
    restart: unless-stopped
    # built on hub as an autobuild against our fork
    # see https://github.com/kartoza/geonode-generic
    # and https://hub.docker.com/r/kartoza/geonode-generic
    image: kartoza/scanagroempresa_geonode_generic:2.9-dev-geonode_generic-20190727
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    links:
      - db
      - smtp
      - rabbitmq
    command: uwsgi --ini /usr/src/app/uwsgi.ini
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
      # See btsync and volume notes below for details on this
      - templates:/usr/src/app/geonode_generic/templates
      # To install private skin app
      - geonode-ssh-config:/root/.ssh
    environment:
      GEONODE_PREFIX: "''"
      GEONODE_INDEX_PREFIX: "r'^${GEONODE_INDEX_URL_PREFIX}?'"
      ROOT_URLCONF: core.root_urls
      PYTHONPATH: '/usr/src/scanagroempresa-docker'
      SCANAGROEMPRESA_URL: http://${SITEURL}/${SCANAGROEMPRESA_URL_PREFIX}
      GEONODE_INSTANCE_NAME: geonode
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      DEBUG: 'False'
      # Database URL should be in the form:
      # postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
      #       DATABASE_URL: postgres://postgres:postgres@db:5432/geonode
      DATABASE_HOST: db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: geonode
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: geonode
      GEONODE_DATABASE_PASSWORD: geonode
      GEONODE_GEODATABASE: geonode_data
      GEONODE_GEODATABASE_PASSWORD: geonode_data
      # Celery settings
      ASYNC_SIGNALS_GEONODE: 'True'
      USE_GEOSERVER: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672/

      DJANGO_SETTINGS_MODULE: core.settings.overrides
      SECRET_KEY: ${SECRET_KEY}
      DOCKER_ENV: production
      UWSGI_CMD: uwsgi --ini /usr/src/app/uwsgi.ini
      IS_CELERY: False
      C_FORCE_ROOT: 1
      SITEURL: http://${SITEURL}/
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend

      {{- if eq .Values.USE_EXTERNAL_SMTP "true" }}

      MAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}

      {{- else }}

      EMAIL_HOST: smtp
      EMAIL_PORT: 25
      EMAIL_HOST_USER: noreply
      EMAIL_HOST_PASSWORD: docker
      EMAIL_USE_TLS: 'False'

      {{- end }}

      DEFAULT_FROM_EMAIL: ${GEONODE_SUPPORT_EMAIL}
      # replaced with defaults in settings
      GEOSERVER_BASE_URL: http://${SITEURL}/geoserver/
      GEOSERVER_PUBLIC_LOCATION: http://${SITEURL}/geoserver/
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      STATIC_ROOT: /mnt/volumes/statics/static/
      MEDIA_ROOT: /mnt/volumes/statics/uploaded/
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      ADMIN_EMAILS: ${ADMIN_EMAILS}
      # mind that following lines are rancher-specific
      RANCHER_STACK: {{ .Stack.Name }}
      RANCHER_ENV: {{ .Environment.Name }}
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      DOCKER_API_VERSION: "1.24"
      # Skin settings
      {{- if eq .Values.USE_GEONODE_THEME_APP "True" }}

      USE_GEONODE_THEME_APP: ${USE_GEONODE_THEME_APP}
      GEONODE_THEME_APP_NAME: ${GEONODE_THEME_APP_NAME}
      GEONODE_THEME_APP_PIP_URL: ${GEONODE_THEME_APP_PIP_URL}

      {{- end }}

  worker:
    restart: unless-stopped
    # built on hub as an autobuild against our fork
    # see https://github.com/kartoza/geonode-generic
    # and https://hub.docker.com/r/kartoza/geonode-generic
    image: kartoza/scanagroempresa_geonode_generic:2.9-dev-geonode_generic-20190727
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    links:
      - db
      - smtp
      - rabbitmq
    command: celery worker -A core -l debug -Q celery,default,geonode,cleanup,update,email -n geonode.%h -B
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
      # See btsync and volume notes below for details on this
      - templates:/usr/src/app/geonode_generic/templates
      # To install private skin app
      - geonode-ssh-config:/root/.ssh
    environment:
      GEONODE_PREFIX: "''"
      GEONODE_INDEX_PREFIX: "r'^${GEONODE_INDEX_URL_PREFIX}?'"
      ROOT_URLCONF: core.root_urls
      PYTHONPATH: '/usr/src/scanagroempresa-docker'
      SCANAGROEMPRESA_URL: http://${SITEURL}/${SCANAGROEMPRESA_URL_PREFIX}
      GEONODE_INSTANCE_NAME: geonode
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      DEBUG: 'False'
      # Database URL should be in the form:
      # postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
      #       DATABASE_URL: postgres://postgres:postgres@db:5432/geonode
      DATABASE_HOST: db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: geonode
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: geonode
      GEONODE_DATABASE_PASSWORD: geonode
      GEONODE_GEODATABASE: geonode_data
      GEONODE_GEODATABASE_PASSWORD: geonode_data
      # Celery settings
      ASYNC_SIGNALS_GEONODE: 'True'
      USE_GEOSERVER: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672/

      DJANGO_SETTINGS_MODULE: core.settings.overrides
      SECRET_KEY: ${SECRET_KEY}
      # Left empty so entrypoint can run custom script
      DOCKER_ENV: ""
      UWSGI_CMD: uwsgi --ini /usr/src/app/uwsgi.ini
      IS_CELERY: False
      C_FORCE_ROOT: 1
      SITEURL: http://${SITEURL}/
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend

      {{- if eq .Values.USE_EXTERNAL_SMTP "true" }}

      MAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}

      {{- else }}

      EMAIL_HOST: smtp
      EMAIL_PORT: 25
      EMAIL_HOST_USER: noreply
      EMAIL_HOST_PASSWORD: docker
      EMAIL_USE_TLS: 'False'

      {{- end }}

      DEFAULT_FROM_EMAIL: ${GEONODE_SUPPORT_EMAIL}
      # replaced with defaults in settings
      GEOSERVER_BASE_URL: http://${SITEURL}/geoserver/
      GEOSERVER_PUBLIC_LOCATION: http://${SITEURL}/geoserver/
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      STATIC_ROOT: /mnt/volumes/statics/static/
      MEDIA_ROOT: /mnt/volumes/statics/uploaded/
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      ADMIN_EMAILS: ${ADMIN_EMAILS}
      # mind that following lines are rancher-specific
      RANCHER_STACK: {{ .Stack.Name }}
      RANCHER_ENV: {{ .Environment.Name }}
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      DOCKER_API_VERSION: "1.24"
      # Skin settings
      {{- if eq .Values.USE_GEONODE_THEME_APP "True" }}

      USE_GEONODE_THEME_APP: ${USE_GEONODE_THEME_APP}
      GEONODE_THEME_APP_NAME: ${GEONODE_THEME_APP_NAME}
      GEONODE_THEME_APP_PIP_URL: ${GEONODE_THEME_APP_PIP_URL}

      {{- end }}

  geoserver:
    image: geosolutionsit/geoserver-docker:2.13.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: geoserver
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    links:
      - db
      - data-dir-conf
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    environment:
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      DOCKERHOST:
      DOCKER_HOST_IP:
      GEONODE_HOST_IP:
      NGINX_BASE_URL: http://${SITEURL}/

  geonode:
    image: geosolutionsit/nginx-geonode:latest
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: nginx
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    links:
      - django
      - geoserver
    ports:
      - "${NGINX_PORT_MAPPING}"
    volumes:
      - statics:/mnt/volumes/statics


  data-dir-conf:
    image: geosolutionsit/geoserver_data:2.13.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
      org.geonode.component: conf
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  backup-db:
    image: kartoza/pg-backup:9.6
    restart: unless-stopped
    container_name: backup4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: backup
      org.geonode.instance.name: geonode
    links:
      - db
    volumes:
      - dbbackups:/backups
    environment:
      DUMPPREFIX: PG_scanagroempresa
      POSTGRES_USER: postgres
      POSTGRES_PASS: postgres
      POSTGRES_PORT: 5432
      POSTGRES_HOST: db
      POSTGRES_DBNAME: geonode
      ARCHIVE_FILENAME: /backups/PG_scanagroempresa
      # for psql shortcut
      PGUSER: postgres
      PGPASSWORD: postgres
      PGPORT: 5432
      PGHOST: db
      # for restore script
      WITH_POSTGIS: 1

  btsync-data:
    # BTSync backups for database dumps
    image: kartoza/btsync:rancher
    hostname: btsync-data
    restart: unless-stopped
    volumes:
      - dbbackups:/web:rw
    environment:
      - SECRET=${BTSYNC_DATA_SECRET}
      - DEVICE=GeonodeGenericBackups-{{ .Stack.Name }}
      - STANDBY_MODE=TRUE

  btsync-templates:
    # BTSync backups for database dumps
    # for templates generated on the fly by django
    # so that we can customise them and have them 
    # persist between upgrades. Use the Django admin
    # Home › GeoNode Client Library › Themes
    # to generate an initial one, then customise
    # via btsync in this folder the generated theme
    # (avoid regenerating the template in django admin 
    # after that).
    image: kartoza/btsync:rancher
    hostname: btsync-data
    restart: unless-stopped
    volumes:
      - templates:/web:rw
    environment:
      - SECRET=${BTSYNC_TEMPLATES_SECRET}
      - DEVICE=GeonodeGenericTemplates-{{ .Stack.Name }}
      - STANDBY_MODE=TRUE

  redis:
    image: library/redis:4.0.11
    volumes:
      - scanagroempresa-redis-data:/data/

  scanagroempresa:
    image: kartoza/scanagroempresa:v1.1.0-20190727
    working_dir: /home/web/extra_app
    volumes:
      - scanagroempresa-statics:/home/web/static:rw
      # To install private skin app
      - scanagroempresa-ssh-config:/root/.ssh
    links:
      - db
    environment:
      DJANGO_SECRET_KEY: ${SECRET_KEY}
      PYTHONPATH: '/home/web/extra_app'
      URL_PREFIX: ${SCANAGROEMPRESA_URL_PREFIX}
      GEONODE_INDEX_PREFIX: ${GEONODE_INDEX_URL_PREFIX}
      ROOT_URLCONF: 'scanterra.root_urls'
      DJANGO_SETTINGS_MODULE: 'scanterra.settings_prod'
      SITEURL: http://${SITEURL}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      STATIC_ROOT: /home/web/static
      MEDIA_ROOT: /home/web/media
      # For database
      PGDATABASE: scanweb
      PGUSER: postgres
      PGPASSWORD: postgres
      PGHOST: db
      PGPORT: 5432
      DATA_PGDATABASE: kobo_form_data
      DATA_PGUSER: postgres
      DATA_PGPASSWORD: postgres
      DATA_PGHOST: db
      DATA_PGPORT: 5432
      GEONODE_PGDATABASE: geonode
      GEONODE_PGUSER: postgres
      GEONODE_PGPASSWORD: postgres
      GEONODE_PGHOST: db
      GEONODE_PGPORT: 5432
      KOBO_PGDATABASE: ${KOBO_PGDATABASE}
      KOBO_PGUSER: ${KOBO_PGUSER}
      KOBO_PGPASSWORD: ${KOBO_PGPASSWORD}
      KOBO_PGHOST: ${KOBO_PGHOST}
      KOBO_PGPORT: ${KOBO_PGPORT}
      # For GeoNode
      GEONODE_SERVER_HOST: http://geonode
      GEONODE_SERVER_PUBLIC_HOST: http://${SITEURL}
      GEOSERVER_SERVER_HOST: http://${SITEURL}/geoserver
      GEOSERVER_HOST: http://${SITEURL}/geoserver
      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      # Kobo API
      KOBO_API_URL: ${KOBO_API_URL}
      KPI_URL: ${KPI_URL}
      KOBO_API_TOKEN: ${KOBO_API_TOKEN}
      # Redis settings
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DEFAULT_DB: 1
      REDIS_SESSION_DB: 2
      # Skin settings
      {{- if eq .Values.USE_SCANAGROEMPRESA_THEME_APP "True" }}

      USE_SCANAGROEMPRESA_THEME_APP: ${USE_SCANAGROEMPRESA_THEME_APP}
      SCANAGROEMPRESA_THEME_APP_NAME: ${SCANAGROEMPRESA_THEME_APP_NAME}
      SCANAGROEMPRESA_THEME_APP_PIP_URL: ${SCANAGROEMPRESA_THEME_APP_PIP_URL}

      {{- end }}

    labels:
      io.rancher.container.pull_image: always
    restart: unless-stopped

  geonode-updatelayers:
    restart: unless-stopped
    # built on hub as an autobuild against our fork
    # see https://github.com/kartoza/geonode-generic
    # and https://hub.docker.com/r/kartoza/geonode-generic
    image: kartoza/scanagroempresa_geonode_generic:2.9-dev-geonode_generic-20190727
    # tty: true
    command: python manage.py updatelayers -i -s kobo_form_data
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
      io.rancher.container.start_once: 'true'
      io.rancher.container.pull_image: always
      cron.schedule: 0 */10 * * * ?
      cron.action: restart
    links:
      - db
      - smtp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
      # See btsync and volume notes below for details on this
      - templates:/usr/src/app/geonode_generic/templates
      # To install private skin app
      - geonode-ssh-config:/root/.ssh
    environment:
      GEONODE_PREFIX: "''"
      GEONODE_INDEX_PREFIX: "r'^${GEONODE_INDEX_URL_PREFIX}?'"
      ROOT_URLCONF: core.root_urls
      PYTHONPATH: '/usr/src/scanagroempresa-docker'
      SCANAGROEMPRESA_URL: http://${SITEURL}/${SCANAGROEMPRESA_URL_PREFIX}
      GEONODE_INSTANCE_NAME: geonode
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      DEBUG: 'False'
      # Database URL should be in the form:
      # postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
      #       DATABASE_URL: postgres://postgres:postgres@db:5432/geonode
      DATABASE_HOST: db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: geonode
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: geonode
      GEONODE_DATABASE_PASSWORD: geonode
      GEONODE_GEODATABASE: geonode_data
      GEONODE_GEODATABASE_PASSWORD: geonode_data
      # BROKER_URL: amqp://guest:guest@rabbitmq:5672/
      DJANGO_SETTINGS_MODULE: core.settings.overrides
      SECRET_KEY: ${SECRET_KEY}
      # Left empty so entrypoint can run custom script
      DOCKER_ENV: ""
      UWSGI_CMD: uwsgi --ini /usr/src/app/uwsgi.ini
      IS_CELERY: False
      C_FORCE_ROOT: 1
      SITEURL: http://${SITEURL}/
      EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend

      {{- if eq .Values.USE_EXTERNAL_SMTP "true" }}

      MAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}

      {{- else }}

      EMAIL_HOST: smtp
      EMAIL_PORT: 25
      EMAIL_HOST_USER: noreply
      EMAIL_HOST_PASSWORD: docker
      EMAIL_USE_TLS: 'False'

      {{- end }}

      DEFAULT_FROM_EMAIL: ${GEONODE_SUPPORT_EMAIL}
      # replaced with defaults in settings
      GEOSERVER_BASE_URL: http://${SITEURL}/geoserver/
      GEOSERVER_PUBLIC_LOCATION: http://${SITEURL}/geoserver/
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      STATIC_ROOT: /mnt/volumes/statics/static/
      MEDIA_ROOT: /mnt/volumes/statics/uploaded/
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      ADMIN_EMAILS: ${ADMIN_EMAILS}
      # mind that following lines are rancher-specific
      RANCHER_STACK: {{ .Stack.Name }}
      RANCHER_ENV: {{ .Environment.Name }}
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      DOCKER_API_VERSION: "1.24"
      # Skin settings
      {{- if eq .Values.USE_GEONODE_THEME_APP "True" }}

      USE_GEONODE_THEME_APP: ${USE_GEONODE_THEME_APP}
      GEONODE_THEME_APP_NAME: ${GEONODE_THEME_APP_NAME}
      GEONODE_THEME_APP_PIP_URL: ${GEONODE_THEME_APP_PIP_URL}

      {{- end }}

  kobo-extractor:
    image: kartoza/scanagroempresa:v1.1.0-20190727
    command: python manage.py kobo_extractor
    working_dir: /home/web/extra_app
    volumes:
      - scanagroempresa-statics:/home/web/static:rw
      # To install private skin app
      - scanagroempresa-ssh-config:/root/.ssh
    links:
      - db
    environment:
      DJANGO_SECRET_KEY: ${SECRET_KEY}
      PYTHONPATH: '/home/web/extra_app'
      URL_PREFIX: ${SCANAGROEMPRESA_URL_PREFIX}
      GEONODE_INDEX_PREFIX: ${GEONODE_INDEX_URL_PREFIX}
      ROOT_URLCONF: 'scanterra.root_urls'
      DJANGO_SETTINGS_MODULE: 'scanterra.settings_prod'
      SITEURL: http://${SITEURL}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      STATIC_ROOT: /home/web/static
      MEDIA_ROOT: /home/web/media
      # For database
      PGDATABASE: scanweb
      PGUSER: postgres
      PGPASSWORD: postgres
      PGHOST: db
      PGPORT: 5432
      DATA_PGDATABASE: kobo_form_data
      DATA_PGUSER: postgres
      DATA_PGPASSWORD: postgres
      DATA_PGHOST: db
      DATA_PGPORT: 5432
      GEONODE_PGDATABASE: geonode
      GEONODE_PGUSER: postgres
      GEONODE_PGPASSWORD: postgres
      GEONODE_PGHOST: db
      GEONODE_PGPORT: 5432
      KOBO_PGDATABASE: ${KOBO_PGDATABASE}
      KOBO_PGUSER: ${KOBO_PGUSER}
      KOBO_PGPASSWORD: ${KOBO_PGPASSWORD}
      KOBO_PGHOST: ${KOBO_PGHOST}
      KOBO_PGPORT: ${KOBO_PGPORT}
      # For GeoNode
      GEONODE_SERVER_HOST: http://geonode
      GEONODE_SERVER_PUBLIC_HOST: http://${SITEURL}
      GEONODE_ADMIN_USER: ${GEONODE_ADMIN_USER}
      GEONODE_ADMIN_PASSWORD: ${GEONODE_ADMIN_PASSWORD}
      GEOSERVER_SERVER_HOST: http://${SITEURL}/geoserver
      GEOSERVER_HOST: http://${SITEURL}/geoserver
      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      # Kobo API
      KOBO_API_URL: ${KOBO_API_URL}
      KPI_URL: ${KPI_URL}
      KOBO_API_TOKEN: ${KOBO_API_TOKEN}
      # Redis settings
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DEFAULT_DB: 1
      REDIS_SESSION_DB: 2
      # Skin settings
      {{- if eq .Values.USE_SCANAGROEMPRESA_THEME_APP "True" }}

      USE_SCANAGROEMPRESA_THEME_APP: ${USE_SCANAGROEMPRESA_THEME_APP}
      SCANAGROEMPRESA_THEME_APP_NAME: ${SCANAGROEMPRESA_THEME_APP_NAME}
      SCANAGROEMPRESA_THEME_APP_PIP_URL: ${SCANAGROEMPRESA_THEME_APP_PIP_URL}

      {{- end }}

    labels:
      io.rancher.container.start_once: 'true'
      io.rancher.container.pull_image: always
      cron.schedule: 0 */5 * * * ?
      cron.action: restart

  borg-backup-service:
    image: lucernae/borgbackup:1.1.8
    labels:
      io.rancher.container.pull_image: always
      cron.schedule: ${BORG_BACKUP_FREQUENCY}
      cron.action: restart
      io.rancher.container.start_once: 'true'
    environment:
      BORG_REPO: /borg/repo
      ARCHIVE_PREFIX: kobotoolbox
      BACKUP_FROM: /borg/data
      BACKUP_WHAT: "."
      COMPRESSION: lz4
      BORG_PASSPHRASE: ${BORG_PASSPHRASE}
      PRUNE: 1
      KEEP_DAILY: 7
      KEEP_WEEKLY: 4
      KEEP_MONTHLY: 12
      KEEP_YEARLY: 1
    volumes:
      - borg-repo:/borg/repo
      - borg-cache:/root/.cache/borg
      - geoserver-data-dir:/borg/data/geoserver-data-dir
      - dbbackups:/borg/data/dbbackups
      - templates:/borg/data/templates

  borg-backup-service-server:
    image: lucernae/borgbackup:1.1.8
    labels:
      io.rancher.container.pull_image: always
    environment:
      BORG_REPO: /borg/repo
      ARCHIVE_PREFIX: kobotoolbox
      BORG_PASSPHRASE: ${BORG_PASSPHRASE}
      USERS: "root"
      BORG_RELOCATED_REPO_ACCESS_IS_OK: 'yes'
    volumes:
      - borg-users-home:/root
      - borg-repo:/borg/repo
      - borg-cache:/root/.cache/borg
      - geoserver-data-dir:/borg/data/geoserver-data-dir
      - statics:/borg/data/statics
      - dbbackups:/borg/data/dbbackups
      - templates:/borg/data/templates

volumes:
  geoserver-data-dir:
#    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
#    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    driver: ${BACKUPS_VOLUME_DRIVER}
    external: {{ .Values.BACKUPS_VOLUME_EXTERNAL }}
#    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  statics:
  geonode-ssh-config:
  scanagroempresa-ssh-config:
#    name: ${COMPOSE_PROJECT_NAME}-statics
  # for templates generated on the fly by django
  # so that we can customise them and have them 
  # persist between upgrades. Use the Django admin
  # Home › GeoNode Client Library › Themes
  # to generate an initial one, then customise
  # via btsync in this folder the generated theme
  # (avoid regenerating the template in django admin 
  # after that).
  scanagroempresa-statics:
  scanagroempresa-redis-data:
  # For borg
  borg-repo:
  borg-cache:
  borg-users-home:
