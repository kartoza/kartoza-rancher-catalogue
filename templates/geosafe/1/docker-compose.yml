# Base docker-compose file for rancher in staging environment
# This file has some specific tweaks for staging environment
# You can copy this file and paste it when creating a new stack in rancher
# It will try to sync related files

# Rancher currently only supports up to version 2
# If you want to use docker-swarm, create another orchestration with version 3
version: '2'
volumes:
  postgis-data:
  postgis-history-data:
  django-media-data:
  django-media-history-data:
  django-static-data:
  qgis-server-qgis-layer-data:
  qgis-server-qgis-layer-history-data:
  qgis-server-qgis-cache-data:
  inasafe-headless-output-data:

services:

  rabbitmq:
    image: rabbitmq:3.6

  postgis:
    image: kartoza/postgis:9.6-2.4
    volumes:
      - 'postgis-data:/var/lib/postgresql'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_DB}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - ALLOW_IP_RANGE=${POSTGRES_HBA_RANGE}
    restart: unless-stopped

  dbbackup: &dbbackup
    image: kartoza/pg-backup:9.6
    volumes:
      - postgis-history-data:/backups
    links:
      - postgis
    environment:
      # make this equal to PG_$(PROJECT_ID) in makefile
      - DUMPPREFIX=PG_geonode
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGUSER=${POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASS}
      - PGDATABASE=${POSTGRES_DB}
      - PGPORT=5432
      - PGHOST=db
    restart: unless-stopped

  mediabackup:
    image: kartoza/sftp-backup:1.0
    volumes:
      # this folder is used to store local backups from django media
      - django-media-history-data:/backups
      # this folder is used as target folder/source where the backup comes from
      # this backup comes from django media
      - django-media-data:/media_backup
    environment:
      - DUMPPREFIX=MEDIA_geonode
      # reduce frequency because the dump is really big
      - DAILY=3
      - MONTHLY=2
      - YEARLY=1
      - TARGET_FOLDER=/media_backup
      - USE_SFTP_BACKUP=False
    restart: unless-stopped

  qgisservermediabackup:
    image: kartoza/sftp-backup:1.0
    volumes:
      # this folder is used to store local backups from django media
      - qgis-server-qgis-layer-history-data:/backups
      # this folder is used as target folder/source where the backup comes from
      # this backup comes from django media
      - qgis-server-qgis-layer-data:/media_backup
    environment:
      - DUMPPREFIX=MEDIA_qgisserver
      # reduce frequency because the dump is really big
      - DAILY=3
      - MONTHLY=2
      - YEARLY=1
      - TARGET_FOLDER=/media_backup
      - USE_SFTP_BACKUP=False
    restart: unless-stopped

  qgis-server:
    image: rancher/lb-service-haproxy:v0.9.1
    expose:
    - 80:80/tcp
    labels:
      io.rancher.container.agent.role: environmentAdmin
      io.rancher.container.create_agent: 'true'
    restart: unless-stopped

  qgis-server-backend:
    image: kartoza/qgis-server:2.18
    volumes:
      - 'django-media-data:/usr/src/app/geonode/uploaded'
      - 'qgis-server-qgis-layer-data:/usr/src/app/geonode/qgis_layer'
    environment:
      - DEBUG=True
      # Write to stdout so we dont fill the container with logs
      - QGIS_LOG_FILE=/dev/stdout
      - QGIS_SERVER_LOG_FILE=/dev/stdout
      # Log level 0 is the lowest (catch all), 5 is the highest (only fatal error)
      - QGIS_DEBUG=0
      - QGIS_SERVER_LOG_LEVEL=0
      # It is important to include this environment variable
      # QGIS-Server:LTR cgi needs it
      - QGIS_PROJECT_FILE=
    labels:
      io.rancher.container.pull_image: always
    restart: unless-stopped

  smtp:
    image: catatnight/postfix
    environment:
      # You could change this to something more suitable
      - maildomain=${MAIL_DOMAIN}
      - smtp_user=noreply:docker
    restart: unless-stopped

  django:
    image: kartoza/geonode_django_geosafe:2.8.x-qgis_server
    volumes:
      - 'django-media-data:/usr/src/app/geonode/uploaded'
      - 'django-static-data:/usr/src/app/geonode/static_root'
      - 'qgis-server-qgis-layer-data:/usr/src/app/geonode/qgis_layer'
      - 'qgis-server-qgis-cache-data:/usr/src/app/geonode/qgis_tiles'
      - 'geonode-backup-data:/geonode_backup'
      - 'inasafe-headless-output-data:/home/geosafe/impact_layers'
    entrypoint:
      - /entry-point.sh
    command:
      - prod
    environment:
      - DATABASE_URL=postgres://${POSTGRES_DB}:${POSTGRES_PASS}@db:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
      - CELERY_TASK_ALWAYS_EAGER=False
# Should be specified in docker-compose.override.yml. Because it depends on the
# host
      - ADMIN=${ADMIN_EMAIL}
      - ALLOWED_HOSTS=['django','localhost','${SITE_URL}',${DJANGO_ALLOWED_HOSTS}]
      - DEBUG=False
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
      - SITEURL=http://${SITE_URL}/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
      # Skin settings
      {{- if eq .Values.USE_THEME_APP "True" }}

      - USE_THEME_APP=${USE_THEME_APP}
      - THEME_APP_NAME=${THEME_APP_NAME}
      - CUSTOM_THEME_APP_PIP_URL=${CUSTOM_THEME_APP_PIP_URL}

      {{- end }}
      # GeoNode docker specific settings
      - GEONODE_LB_HOST_IP=${SITE_URL}
      - GEONODE_LB_PORT=80
      - GEONODE_DATABASE=${POSTGRES_DB}
      - GEONODE_DATABASE_PASSWORD=${POSTGRES_PASS}
      - GEONODE_GEODATABASE=${POSTGRES_DB}
      - GEONODE_GEODATABASE_PASSWORD=${POSTGRES_PASS}
      - STATIC_ROOT=/usr/src/app/geonode/static_root
      - MEDIA_ROOT=/usr/src/app/geonode/uploaded
      # GeoSAFE Related
      - USE_GEOSAFE=True
      - USE_LAYER_FILE_ACCESS=True
      # Base directory that will be used by InaSAFE Headless
      - INASAFE_LAYER_DIRECTORY=/home/geosafe/media/
      - INASAFE_LAYER_DIRECTORY_BASE_PATH=/usr/src/app/geonode/qgis_layer/
      - GEOSAFE_IMPACT_OUTPUT_DIRECTORY=/home/geosafe/impact_layers
      - INASAFE_IMPACT_BASE_URL=/output/
      - USE_LAYER_HTTP_ACCESS=False
      - INASAFE_ANALYSIS_RUN_TIME_LIMIT=${INASAFE_ANALYSIS_RUN_TIME_LIMIT}
      - INASAFE_ANALYSIS_AREA_LIMIT=${INASAFE_ANALYSIS_AREA_LIMIT}
    restart: unless-stopped
    links:
      - postgis:db
      - rabbitmq
      - qgis-server
    labels:
      io.rancher.container.pull_image: always

  nginx-conf:
    image: kartoza/geonode_nginx_conf:2.8.x
    volumes:
      - 'nginx-conf-data:/etc/nginx/sites-available'
    environment:
      TARGET: /etc/nginx/sites-available
    labels:
      io.rancher.container.pull_image: always
      io.rancher.container.start_once: 'true'

  nginx:
    image: nginx
    entrypoint: /etc/nginx/sites-available/docker-entrypoint.sh
    command: prod
    links:
      - django
    volumes:
      - 'nginx-conf-data:/etc/nginx/sites-available'
      - 'django-media-data:/home/web/media:ro'
      - 'django-static-data:/home/web/static:ro'
    restart: unless-stopped

  geonode-lb:
    image: rancher/lb-service-haproxy:v0.9.1
    ports:
      - ${WEBSERVER_PORT}:80
    labels:
      io.rancher.container.agent.role: environmentAdmin,agent
      io.rancher.container.agent_service.drain_provider: 'true'
      io.rancher.container.create_agent: 'true'

  celery:
    image: kartoza/geonode_django_geosafe:2.8.x-qgis_server
    restart: on-failure
    working_dir: /usr/src/app
    volumes:
      - 'django-media-data:/usr/src/app/geonode/uploaded'
      - 'qgis-server-qgis-layer-data:/usr/src/app/geonode/qgis_layer'
      - 'qgis-server-qgis-cache-data:/usr/src/app/geonode/qgis_tiles'
      - 'inasafe-headless-output-data:/home/geosafe/impact_layers'
    environment:
      - C_FORCE_ROOT=True
      - DATABASE_URL=postgres://${POSTGRES_DB}:${POSTGRES_PASS}@db:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
      - CELERY_TASK_ALWAYS_EAGER=False
      # Should be specified in docker-compose.override.yml. Because it depends on the
      # host
      - ADMIN=${ADMIN_EMAIL}
      - ALLOWED_HOSTS=['django','localhost','${SITE_URL}',${DJANGO_ALLOWED_HOSTS}]
      - DEBUG=False
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
      - SITEURL=http://${SITE_URL}/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
      # Skin settings
      {{- if eq .Values.USE_THEME_APP "true" }}

      - USE_THEME_APP=${USE_THEME_APP}
      - THEME_APP_NAME=${THEME_APP_NAME}
      - CUSTOM_THEME_APP_PIP_URL=${CUSTOM_THEME_APP_PIP_URL}

      {{- end }}
      # GeoNode docker specific settings
      - GEONODE_LB_HOST_IP=${SITE_URL}
      - GEONODE_LB_PORT=80
      - GEONODE_DATABASE=${POSTGRES_DB}
      - GEONODE_DATABASE_PASSWORD=${POSTGRES_PASS}
      - GEONODE_GEODATABASE=${POSTGRES_DB}
      - GEONODE_GEODATABASE_PASSWORD=${POSTGRES_PASS}
      # GeoSAFE Related
      - USE_GEOSAFE=True
      - USE_LAYER_FILE_ACCESS=True
      # Base directory that will be used by InaSAFE Headless
      - INASAFE_LAYER_DIRECTORY=/home/geosafe/media/
      - INASAFE_LAYER_DIRECTORY_BASE_PATH=/usr/src/app/geonode/qgis_layer/
      - GEOSAFE_IMPACT_OUTPUT_DIRECTORY=/home/geosafe/impact_layers
      - INASAFE_IMPACT_BASE_URL=/output/
      - USE_LAYER_HTTP_ACCESS=False
      - INASAFE_ANALYSIS_RUN_TIME_LIMIT=${INASAFE_ANALYSIS_RUN_TIME_LIMIT}
      - INASAFE_ANALYSIS_AREA_LIMIT=${INASAFE_ANALYSIS_AREA_LIMIT}
    entrypoint:
      - /bin/sh
    command: -c "celery -A geosafe worker -l debug -Q default,cleanup,email,update,geosafe -n geonode.%h -B"
    links:
      - rabbitmq
      - postgis:db
      - qgis-server
    labels:
      io.rancher.container.pull_image: always

  inasafe-headless:
    image: inasafe/headless_processor:v4.4.0
    restart: on-failure
    environment:
      - C_FORCE_ROOT=True
      - PYTHONPATH=/usr/share/qgis/python:/usr/share/qgis/python/plugins:/usr/share/qgis/python/plugins/inasafe
      - DISPLAY=:99
      - INASAFE_HEADLESS_BROKER_HOST=amqp://guest:guest@rabbitmq:5672/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_DIR=/home/output/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_URL=http://inasafe-output/output/
      - INASAFE_OUTPUT_DIR=/home/geosafe/impact_layers
      - INASAFE_WORK_DIR=/tmp/inasafe
      - QGIS_LOG_FILE=/tmp/inasafe/realtime/logs/qgis.log
      - QGIS_DEBUG_FILE=/tmp/inasafe/realtime/logs/qgis-debug.log
      - QGIS_DEBUG=0
    volumes:
      - 'qgis-server-qgis-layer-data:/home/geosafe/media/'
      - 'inasafe-headless-output-data:/home/geosafe/impact_layers'
    command: prod inasafe-headless-worker
    links:
      - rabbitmq
      - nginx
      - django
    labels:
      io.rancher.container.pull_image: always
      cron.action: restart
      cron.schedule: 0 0 * * * ?

  btsync-data:
    # BTSync backups for database dumps
    image: kartoza/btsync:rancher
    hostname: btsync-data
    restart: unless-stopped
    volumes:
      - postgis-history-data:/web:rw
    environment:
      - SECRET=${BTSYNC_DB_SECRET}
      - DEVICE=${BTSYNC_DB_DEVICE}
      - STANDBY_MODE=TRUE
     
  btsync-media:
    # BTSync backups for django media
    image: kartoza/btsync:rancher
    hostname: btsync-logs
    restart: unless-stopped
    volumes:
      - django-media-history-data:/web:rw
    environment:
      - SECRET=${BTSYNC_MEDIA_SECRET}
      - DEVICE=${BTSYNC_MEDIA_SECRET}
      - STANDBY_MODE=TRUE

